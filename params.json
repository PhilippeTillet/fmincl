{"name":"UMinTL","tagline":"Unconstrained Minimization Template Library","body":"##Features\r\n\r\n* Compatible with **any** Linear Algebra backend\r\n\r\nThe linear algebra routines are well separated from the algorithmic implementations.\r\nYou can pass a custom backend in the optimization procedure. This backend just needs to include a few typedefs, linear algebra routines and some procedures to allocate/delete  vectors/matrices.\r\nFor now, cblas and ViennaCL are available, for using either CPU or OpenCL in the optimization procedure and the objective function.\r\n\r\n* An **extendable** library\r\n\r\nUMinTL relies on templates. You may therefore write your own stopping criterion (eg a cross-validation error if you're doing machine learning). More experienced user may also write their own restarting condition/update direction for the nonlinear conjugate gradient.\r\n\r\n* A **clear** interface\r\n\r\nUMinTL provides a clear API, where any functor can be passed to the optimization procedure. The cumbersomeness of the templates is softened using a type-erasure mechanism.\r\n\r\n* A **robust** package\r\n\r\nUMinTL was extensively tested on the test suite described in \"Testing Unconstrained Optimization Software\" (JJ Mor√© and al.). However, it will never be robust enough. If the procedure fails on your particular problem, please *report*.\r\n\r\n* **Multiple algorithms** available\r\n\r\nThe library supports BFGS, L-BFGS, and Nonlinear Conjugate Gradient. Several updates and restart procedures are available for the conjugate gradient methods.\r\nThe line-search is done using the strong wolfe-powell conditions.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}